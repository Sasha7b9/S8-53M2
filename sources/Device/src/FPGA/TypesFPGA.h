#pragma once


/** @file FPGA_Types.h
    @brief Файл содержит макросы, адреса и и константы, необходимые для работы с прибором
    @verbatim
    После каждого включения прибора необходимо выполнять засылки 2-15
    Засылка WR_START выполняется каждый раз для запуска цикла преобразования
    Засылка WR_STOP выполняется для прекращения цикла преобразования перед новым циклом


    Для управления режимами каналов и синхронизации, смещениями каналов и синхронизации используются выводы PG2, PG3, PG5, PG7
    PG5 - выбор режимов (чипселект)
    PG7 - выбор смещений (чипселект)
    PG2 - тактовые импульсы
    PG3 - данные

    Активный уровень выбора - низкий.
    Перед подачей чипселекта уровень тактового импульса должен быть равен нулю.
    Данные передаются по срезу тактового импульса.
    Микросхема AD5314.
                            __      __      __      __         __      __      __      __      __
                           /  \    /  \    /  \    /  \       /  \    /  \    /  \    /  \    /  \
    PG2       ____________/    \__/    \__/    \__/    \__/  /    \__/    \__/    \__/    \__/    \_____________
              _________                                                                                _________
    PG5 (PG7)          \___________________________________   ________________________________________/
                             ____    ____    ____    ____       ____    ____    ____    ____    ____                                                              
    PG3       ______________/    \__/    \__/    \__/    \_   _/    \__/    \__/    \__/    \__/    \___________
                            \____/  \____/  \____/  \____/     \____/  \____/  \____/  \____/  \____/                                                    
                             DB15    DB14    DB13    DB12       DB4     DB3     DB2     DB1     DB0

    @endverbatim 
*/


#define WR_START                (HAL_FMC::_ADDR_FPGA + 0x00)    // Запуск цикла измерения. Для запуска нужно записать 1.
#define WR_RAZV                 (HAL_FMC::_ADDR_FPGA + 0x01)     // Установка частоты синхронизации. Используется в TBase::Load().
#define WR_PRED                 (HAL_FMC::_ADDR_FPGA + 0x02)
#define WR_POST                 (HAL_FMC::_ADDR_FPGA + 0x03)
#define WR_TRIG_F               (HAL_FMC::_ADDR_FPGA + 0x04)
#define WR_UPR                  (HAL_FMC::_ADDR_FPGA + 0x05)
#define WR_STOP                 (HAL_FMC::_ADDR_FPGA + 0x1f)

//#define RD_ADDR_LAST_RECORD     (HAL_FMC::_ADDR_FPGA + 0x08) // Чтение адреса последней записи
#define RD_FREQ_LOW             (HAL_FMC::_ADDR_FPGA + 0x10)
#define RD_FREQ_HI              (HAL_FMC::_ADDR_FPGA + 0x18)
#define RD_PERIOD_LOW           (HAL_FMC::_ADDR_FPGA + 0x20)
#define RD_PERIOD_HI            (HAL_FMC::_ADDR_FPGA + 0x28)
#define RD_FL                   (HAL_FMC::_ADDR_FPGA + 0x30)
    #define BIT_DATA_READY          0
    #define BIT_TRIG                1

struct TypeWriteAnalog
{
    enum E
    {
        All,
        Range0,
        Range1,
        TrigParam,
        ChanParam0,
        ChanParam1
    };
};


struct TypeWriteDAC
{
    enum E
    {
        RShiftA,
        RShiftB,
        TrigLev
    };
};


// Это значение входного сигнала, считанное с АЦП, соответствует нижней границе сетки (-5 клеток от центра). Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
struct ValueFPGA
{
    static const uint8 MIN = 2;
    static const uint8 AVE = 127;   // Это значение входного сигнала, считанное с АЦП, соответствует центру сетки. Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
    static const uint8 MAX = 227;   // Это значение входного сигнала, считанное с АЦП, соответствует верхней границе сетки (+5 клеток от центра). Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
};
